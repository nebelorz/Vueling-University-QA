{
	"info": {
		"_postman_id": "5955bafa-a1ed-4f28-9334-20226154392a",
		"name": "Regression_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27605714"
	},
	"item": [
		{
			"name": "PET_ENDPOINT_TESTS",
			"item": [
				{
					"name": "TC0 (CRUD)",
					"item": [
						{
							"name": "Add pet with id and name Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm)\r",
											"\r",
											"pm.test(\"Name is setted correctly\", () => {\r",
											"    let data = pm.response.json();\r",
											"    pm.expect(data.name).to.be.eql(pm.environment.get(\"pet_name\"))\r",
											"})\r",
											"\r",
											"pm.test(\"ID is setted correctly\", () => {\r",
											"    let data = pm.response.json();\r",
											"    pm.expect(data.id).to.be.eql(pm.environment.get(\"pet_id\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"pet_id\", 1625, \"integer\")\r",
											"pm.environment.set(\"pet_name\", \"Bobby\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{pet_id}},\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{pet_name}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update pet name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"new_pet_name\", \"Tobby\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"Name is updated\", () => {\r",
											"    let data = pm.response.json();\r",
											"    pm.expect(data.name).to.be.eql(pm.environment.get(\"new_pet_name\"))\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{pet_id}},\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{new_pet_name}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update pet back to original",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"Name is updated to \" + pm.environment.get(\"pet_name\"), () => {\r",
											"    let data = pm.response.json();\r",
											"    pm.expect(data.name).to.be.eql(pm.environment.get(\"pet_name\"))\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{pet_id}},\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{pet_name}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"Pet ID matches \" + pm.environment.get(\"pet_id\"), () => {\r",
											"    let data = pm.response.json();\r",
											"    pm.expect(data.id).to.be.eql(parseInt(pm.environment.get(\"pet_id\")));\r",
											"})\r",
											"\r",
											"pm.test(\"Pet name matches \" + pm.environment.get(\"pet_name\"), () => {\r",
											"    let data = pm.response.json();\r",
											"    pm.expect(data.name).to.be.eql(pm.environment.get(\"pet_name\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/{{pet_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"{{pet_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete pet from DB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/pet/{{pet_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"{{pet_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pet is not in the DB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate404(pm);\r",
											"\r",
											"pm.test(`Pet with ID ${pm.environment.get(\"pet_id\")} is not on DB`, () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.message).to.be.equal(\"Pet not found\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/{{pet_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"{{pet_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1 (Get pets by availabilty)",
					"item": [
						{
							"name": "Get a list of available pets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"areAllAvailable = function(pm) {\r",
											"  const data = pm.response.json();\r",
											"\r",
											"  return data.some((pet) => pet.status === \"available\"); // Recorre todos los pet.status, devuelve true/false\r",
											"};"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"All pets status is 'available'\", () => {\r",
											"    let allPetsAvailable = areAllAvailable(pm);\r",
											"    pm.expect(allPetsAvailable).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "status",
											"value": "sold",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a list of sold pets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"areAllSold = function(pm) {\r",
											"  const data = pm.response.json();\r",
											"  \r",
											"  return data.some((pet) => pet.status === \"sold\"); // Recorre todos los pet.status, devuelve true/false\r",
											"};"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"All pets status is 'sold'\", () => {\r",
											"    let allPetsSold = areAllSold(pm);\r",
											"    pm.expect(allPetsSold).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=sold",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available",
											"disabled": true
										},
										{
											"key": "status",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "status",
											"value": "sold"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a list of pending pets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"areAllPending = function(pm) {\r",
											"  const data = pm.response.json();\r",
											"\r",
											"  return data.some((pet) => pet.status === \"pending\"); // Recorre todos los pet.status, devuelve true/false\r",
											"};"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"All pets status is 'pending'\", () => {\r",
											"    let allPetsPending = areAllPending(pm);\r",
											"    pm.expect(allPetsPending).to.be.true;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available",
											"disabled": true
										},
										{
											"key": "status",
											"value": "pending"
										},
										{
											"key": "status",
											"value": "sold",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC2 (Set image to a pet)",
					"item": [
						{
							"name": "Add pet with id and name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm)\r",
											"\r",
											"pm.test(\"Name is setted correctly\", () => {\r",
											"    let data = pm.response.json();\r",
											"    pm.expect(data.name).to.be.eql(pm.environment.get(\"pet_name\"))\r",
											"})\r",
											"\r",
											"pm.test(\"ID is setted correctly\", () => {\r",
											"    let data = pm.response.json();\r",
											"    pm.expect(data.id).to.be.eql(parseInt(pm.environment.get(\"pet_id\")))\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{pet_id}},\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{pet_name}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set image to an existing pet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "dog.jpg"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/{{pet_id}}/uploadImage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"{{pet_id}}",
										"uploadImage"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "STORE_ENDPOINT_TESTS",
			"item": [
				{
					"name": "TC0 (CRUD)",
					"item": [
						{
							"name": "Create new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm)\r",
											"\r",
											"pm.test(\"Order and petID responses matches with the POST request\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.environment.set(\"response_order_id\", data.id);\r",
											"    pm.environment.set(\"response_order_petId\", data.petId);\r",
											"    pm.expect(data.id).to.be.eql(parseInt(pm.environment.get(\"store_order_id\")));\r",
											"    pm.expect(data.petId).to.be.eql(parseInt(pm.environment.get(\"pet_id\")));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{store_order_id}},\r\n  \"petId\": {{pet_id}},\r\n  \"quantity\": 1,\r\n  \"shipDate\": \"2023-06-30T15:37:33.710Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm)\r",
											"\r",
											"pm.test(\"Order and petID responses matches\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.id).to.be.eql(parseInt(pm.environment.get(\"response_order_id\")));\r",
											"    pm.expect(data.petId).to.be.eql(parseInt(pm.environment.get(\"response_order_petId\")));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/{{store_order_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										"{{store_order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm)\r",
											"\r",
											"pm.test(\"Order \" + pm.collectionVariables.get(\"store_order_id\" + \" succesfully deleted\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.message).to.be.eql(pm.collectionVariables.get(\"store_order_id\"))\r",
											"}))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/{{store_order_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										"{{store_order_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1 (Check inventory)",
					"item": [
						{
							"name": "Get sold pets number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Función para guardar las pets con estado \"sold\" en una variable de entorno y usarla en el siguiente request\r",
											"getSoldPets = function(pm) {\r",
											"  const data = pm.response.json();\r",
											"\r",
											"  pm.environment.set(\"sold_pets\", data.length)\r",
											"};"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"getSoldPets(pm);\r",
											"\r",
											"pm.test(\"At least one pet has status 'sold'\", () => {\r",
											"    pm.expect(pm.environment.get(\"sold_pets\")).to.be.at.least(1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=sold",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available",
											"disabled": true
										},
										{
											"key": "status",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "status",
											"value": "sold"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"Inventory got the same 'sold' pets number as requesting by status\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.sold).to.be.eql(pm.environment.get(\"sold_pets\"))\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/store/inventory",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "USER_ENDPOINT_TESTS",
			"item": [
				{
					"name": "TC 0 (CRUD)",
					"item": [
						{
							"name": "Create new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"user_name\", \"Alex-1001\");\r",
											"pm.environment.set(\"user_password\", \"1234\");\r",
											"pm.environment.set(\"user_email\", \"test@test.com\")\r",
											"\r",
											"const userObject = {\r",
											"  id: 1625,\r",
											"  username: \"{{username}}\",\r",
											"  firstName: \"Alex\",\r",
											"  lastName: \"Gassó\",\r",
											"  email: \"test@test.com\",\r",
											"  password: \"{{user_password}}\",\r",
											"  phone: \"123456789\",\r",
											"  userStatus: 0\r",
											"};\r",
											"\r",
											"pm.environment.set(\"user_object\", JSON.stringify(userObject));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userData = JSON.parse(pm.environment.get(\"user_object\"));\r",
											"const userId = userData.id;\r",
											"\r",
											"validate200OK(pm);\r",
											"pm.test(`User created with ID (${userId})`, () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(parseInt(data.message)).to.be.equal(userId);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{userObject}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(`Response matches username on request (${pm.environment.get(\"user_name\")})`, () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.username).to.be.equal(pm.environment.get(\"user_name\"))\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/{{user_name}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"{{user_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"modified_email\", \"modified@modified.com\");\r",
											"\r",
											"const userObject = {\r",
											"  id: 1625,\r",
											"  username: \"{{username}}\",\r",
											"  firstName: \"Alex\",\r",
											"  lastName: \"Gassó\",\r",
											"  email: \"{{modified_email}}\",\r",
											"  password: \"{{user_password}}\",\r",
											"  phone: \"123456789\",\r",
											"  userStatus: 0\r",
											"};\r",
											"\r",
											"pm.environment.set(\"modified_user_object\", JSON.stringify(userObject));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{userObject}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/{{user_name}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"{{user_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assert user updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"User has been updated\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.email).to.not.equal(pm.environment.get(\"modified_email\"))\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/{{user_name}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"{{user_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"Username has been deleted\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.message).to.be.equal(pm.environment.get(\"user_name\"));\r",
											"} )"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/{{user_name}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"{{user_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assert user is deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate404(pm);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/{{user_name}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"{{user_name}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC 1 (LOGIN/LOGOUT)",
					"item": [
						{
							"name": "Create new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"user_name\", \"Alex-1001\");\r",
											"pm.environment.set(\"user_password\", \"1234\");\r",
											"pm.environment.set(\"user_email\", \"test@test.com\")\r",
											"\r",
											"const userObject = {\r",
											"  id: 1625,\r",
											"  username: \"{{username}}\",\r",
											"  firstName: \"Alex\",\r",
											"  lastName: \"Gassó\",\r",
											"  email: \"test@test.com\",\r",
											"  password: \"{{user_password}}\",\r",
											"  phone: \"123456789\",\r",
											"  userStatus: 0\r",
											"};\r",
											"\r",
											"pm.environment.set(\"user_object\", JSON.stringify(userObject));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const userData = JSON.parse(pm.environment.get(\"user_object\"));\r",
											"const userId = userData.id;\r",
											"\r",
											"validate200OK(pm);\r",
											"pm.test(`User created with ID (${userId})`, () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(parseInt(data.message)).to.be.equal(userId);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{userObject}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Login succesfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"User has logged in correctly\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.message).to.include(\"logged in\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login/?username={{user_name}}&password={{user_password}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login",
										""
									],
									"query": [
										{
											"key": "username",
											"value": "{{user_name}}"
										},
										{
											"key": "password",
											"value": "{{user_password}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout succesfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"validate200OK(pm);\r",
											"\r",
											"pm.test(\"User has logged in correctly\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.message).to.include(\"logged in\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login/?username={{user_name}}&password={{user_password}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login",
										""
									],
									"query": [
										{
											"key": "username",
											"value": "{{user_name}}"
										},
										{
											"key": "password",
											"value": "{{user_password}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"validate200OK = function(pm) {",
					"  pm.test(\"Response status is 200OK\", function() {",
					"    pm.response.to.have.status(200);",
					"  });",
					"}",
					"",
					"validate404 = function(pm) {",
					"  pm.test(\"Response status is 404 Not Found\", function() {",
					"    pm.response.to.have.status(404);",
					"  });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}